// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package codex

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`.
type AlertRecurrence string

const (
	AlertRecurrenceIndefinite AlertRecurrence = "INDEFINITE"
	AlertRecurrenceOnce       AlertRecurrence = "ONCE"
)

var AllAlertRecurrence = []AlertRecurrence{
	AlertRecurrenceIndefinite,
	AlertRecurrenceOnce,
}

// Input for comparison operators.
type ComparisonOperatorInput struct {
	// Greater than.
	Gt string `json:"gt"`
	// Greater than or equal.
	Gte string `json:"gte"`
	// Less than.
	Lt string `json:"lt"`
	// Less than or equal.
	Lte string `json:"lte"`
	// Equal to.
	Eq string `json:"eq"`
}

// GetGt returns ComparisonOperatorInput.Gt, and is useful for accessing the field via an interface.
func (v *ComparisonOperatorInput) GetGt() string { return v.Gt }

// GetGte returns ComparisonOperatorInput.Gte, and is useful for accessing the field via an interface.
func (v *ComparisonOperatorInput) GetGte() string { return v.Gte }

// GetLt returns ComparisonOperatorInput.Lt, and is useful for accessing the field via an interface.
func (v *ComparisonOperatorInput) GetLt() string { return v.Lt }

// GetLte returns ComparisonOperatorInput.Lte, and is useful for accessing the field via an interface.
func (v *ComparisonOperatorInput) GetLte() string { return v.Lte }

// GetEq returns ComparisonOperatorInput.Eq, and is useful for accessing the field via an interface.
func (v *ComparisonOperatorInput) GetEq() string { return v.Eq }

// Input for creating a market cap webhook.
type CreateMarketCapWebhookArgs struct {
	// The name of the webhook (max 128 characters).
	Name string `json:"name"`
	// The url to which the webhook message should be sent.
	CallbackUrl string `json:"callbackUrl"`
	// A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security.
	SecurityToken string `json:"securityToken"`
	// The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`.
	AlertRecurrence AlertRecurrence `json:"alertRecurrence"`
	// A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook.
	GroupId string `json:"groupId"`
	// The conditions which must be met in order for the webhook to send a message.
	Conditions MarketCapEventWebhookConditionInput `json:"conditions"`
	// The settings for retrying failed webhook messages.
	RetrySettings RetrySettingsInput `json:"retrySettings"`
	// An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketId string `json:"bucketId"`
	// An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketSortkey string `json:"bucketSortkey"`
	// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
	PublishingType PublishingType `json:"publishingType"`
	// If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook.
	Deduplicate bool `json:"deduplicate"`
}

// GetName returns CreateMarketCapWebhookArgs.Name, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetName() string { return v.Name }

// GetCallbackUrl returns CreateMarketCapWebhookArgs.CallbackUrl, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetCallbackUrl() string { return v.CallbackUrl }

// GetSecurityToken returns CreateMarketCapWebhookArgs.SecurityToken, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetSecurityToken() string { return v.SecurityToken }

// GetAlertRecurrence returns CreateMarketCapWebhookArgs.AlertRecurrence, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetAlertRecurrence() AlertRecurrence { return v.AlertRecurrence }

// GetGroupId returns CreateMarketCapWebhookArgs.GroupId, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetGroupId() string { return v.GroupId }

// GetConditions returns CreateMarketCapWebhookArgs.Conditions, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetConditions() MarketCapEventWebhookConditionInput {
	return v.Conditions
}

// GetRetrySettings returns CreateMarketCapWebhookArgs.RetrySettings, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetRetrySettings() RetrySettingsInput { return v.RetrySettings }

// GetBucketId returns CreateMarketCapWebhookArgs.BucketId, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetBucketId() string { return v.BucketId }

// GetBucketSortkey returns CreateMarketCapWebhookArgs.BucketSortkey, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetBucketSortkey() string { return v.BucketSortkey }

// GetPublishingType returns CreateMarketCapWebhookArgs.PublishingType, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetPublishingType() PublishingType { return v.PublishingType }

// GetDeduplicate returns CreateMarketCapWebhookArgs.Deduplicate, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhookArgs) GetDeduplicate() bool { return v.Deduplicate }

// Input for creating market cap webhooks.
type CreateMarketCapWebhooksInput struct {
	// A list of market cap webhooks to create.
	Webhooks []CreateMarketCapWebhookArgs `json:"webhooks"`
}

// GetWebhooks returns CreateMarketCapWebhooksInput.Webhooks, and is useful for accessing the field via an interface.
func (v *CreateMarketCapWebhooksInput) GetWebhooks() []CreateMarketCapWebhookArgs { return v.Webhooks }

// Input for creating an NFT event webhook.
type CreateNftEventWebhookArgs struct {
	// The name of the webhook (max 128 characters).
	Name string `json:"name"`
	// The url to which the webhook message should be sent.
	CallbackUrl string `json:"callbackUrl"`
	// A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security.
	SecurityToken string `json:"securityToken"`
	// The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`.
	AlertRecurrence AlertRecurrence `json:"alertRecurrence"`
	// A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook.
	GroupId string `json:"groupId"`
	// The conditions which must be met in order for the webhook to send a message.
	Conditions NftEventWebhookConditionInput `json:"conditions"`
	// The settings for retrying failed webhook messages.
	RetrySettings RetrySettingsInput `json:"retrySettings"`
	// An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketId string `json:"bucketId"`
	// An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketSortkey string `json:"bucketSortkey"`
	// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
	PublishingType PublishingType `json:"publishingType"`
	// If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook.
	Deduplicate bool `json:"deduplicate"`
}

// GetName returns CreateNftEventWebhookArgs.Name, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetName() string { return v.Name }

// GetCallbackUrl returns CreateNftEventWebhookArgs.CallbackUrl, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetCallbackUrl() string { return v.CallbackUrl }

// GetSecurityToken returns CreateNftEventWebhookArgs.SecurityToken, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetSecurityToken() string { return v.SecurityToken }

// GetAlertRecurrence returns CreateNftEventWebhookArgs.AlertRecurrence, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetAlertRecurrence() AlertRecurrence { return v.AlertRecurrence }

// GetGroupId returns CreateNftEventWebhookArgs.GroupId, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetGroupId() string { return v.GroupId }

// GetConditions returns CreateNftEventWebhookArgs.Conditions, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetConditions() NftEventWebhookConditionInput {
	return v.Conditions
}

// GetRetrySettings returns CreateNftEventWebhookArgs.RetrySettings, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetRetrySettings() RetrySettingsInput { return v.RetrySettings }

// GetBucketId returns CreateNftEventWebhookArgs.BucketId, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetBucketId() string { return v.BucketId }

// GetBucketSortkey returns CreateNftEventWebhookArgs.BucketSortkey, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetBucketSortkey() string { return v.BucketSortkey }

// GetPublishingType returns CreateNftEventWebhookArgs.PublishingType, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetPublishingType() PublishingType { return v.PublishingType }

// GetDeduplicate returns CreateNftEventWebhookArgs.Deduplicate, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhookArgs) GetDeduplicate() bool { return v.Deduplicate }

// Input for creating NFT event webhooks.
type CreateNftEventWebhooksInput struct {
	// A list of NFT event webhooks to create.
	Webhooks []CreateNftEventWebhookArgs `json:"webhooks"`
}

// GetWebhooks returns CreateNftEventWebhooksInput.Webhooks, and is useful for accessing the field via an interface.
func (v *CreateNftEventWebhooksInput) GetWebhooks() []CreateNftEventWebhookArgs { return v.Webhooks }

// Input for creating a price webhook.
type CreatePriceWebhookArgs struct {
	// The name of the webhook (max 128 characters).
	Name string `json:"name"`
	// The url to which the webhook message should be sent.
	CallbackUrl string `json:"callbackUrl"`
	// A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security.
	SecurityToken string `json:"securityToken"`
	// The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`.
	AlertRecurrence AlertRecurrence `json:"alertRecurrence"`
	// A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook.
	GroupId string `json:"groupId"`
	// The conditions which must be met in order for the webhook to send a message.
	Conditions PriceEventWebhookConditionInput `json:"conditions"`
	// The settings for retrying failed webhook messages.
	RetrySettings RetrySettingsInput `json:"retrySettings"`
	// An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketId string `json:"bucketId"`
	// An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketSortkey string `json:"bucketSortkey"`
	// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
	PublishingType PublishingType `json:"publishingType"`
	// If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook.
	Deduplicate bool `json:"deduplicate"`
}

// GetName returns CreatePriceWebhookArgs.Name, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetName() string { return v.Name }

// GetCallbackUrl returns CreatePriceWebhookArgs.CallbackUrl, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetCallbackUrl() string { return v.CallbackUrl }

// GetSecurityToken returns CreatePriceWebhookArgs.SecurityToken, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetSecurityToken() string { return v.SecurityToken }

// GetAlertRecurrence returns CreatePriceWebhookArgs.AlertRecurrence, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetAlertRecurrence() AlertRecurrence { return v.AlertRecurrence }

// GetGroupId returns CreatePriceWebhookArgs.GroupId, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetGroupId() string { return v.GroupId }

// GetConditions returns CreatePriceWebhookArgs.Conditions, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetConditions() PriceEventWebhookConditionInput { return v.Conditions }

// GetRetrySettings returns CreatePriceWebhookArgs.RetrySettings, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetRetrySettings() RetrySettingsInput { return v.RetrySettings }

// GetBucketId returns CreatePriceWebhookArgs.BucketId, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetBucketId() string { return v.BucketId }

// GetBucketSortkey returns CreatePriceWebhookArgs.BucketSortkey, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetBucketSortkey() string { return v.BucketSortkey }

// GetPublishingType returns CreatePriceWebhookArgs.PublishingType, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetPublishingType() PublishingType { return v.PublishingType }

// GetDeduplicate returns CreatePriceWebhookArgs.Deduplicate, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhookArgs) GetDeduplicate() bool { return v.Deduplicate }

// Input for creating price webhooks.
type CreatePriceWebhooksInput struct {
	// A list of price webhooks to create.
	Webhooks []CreatePriceWebhookArgs `json:"webhooks"`
}

// GetWebhooks returns CreatePriceWebhooksInput.Webhooks, and is useful for accessing the field via an interface.
func (v *CreatePriceWebhooksInput) GetWebhooks() []CreatePriceWebhookArgs { return v.Webhooks }

// Input for creating a Raw Transaction webhook.
type CreateRawTransactionWebhookArgs struct {
	// The name of the webhook (max 128 characters).
	Name string `json:"name"`
	// The url to which the webhook message should be sent.
	CallbackUrl string `json:"callbackUrl"`
	// A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security.
	SecurityToken string `json:"securityToken"`
	// The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`.
	AlertRecurrence AlertRecurrence `json:"alertRecurrence"`
	// A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook.
	GroupId string `json:"groupId"`
	// The conditions which must be met in order for the webhook to send a message.
	Conditions RawTransactionWebhookConditionInput `json:"conditions"`
	// The settings for retrying failed webhook messages.
	RetrySettings RetrySettingsInput `json:"retrySettings"`
	// An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketId string `json:"bucketId"`
	// An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketSortkey string `json:"bucketSortkey"`
	// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
	PublishingType PublishingType `json:"publishingType"`
	// If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook.
	Deduplicate bool `json:"deduplicate"`
}

// GetName returns CreateRawTransactionWebhookArgs.Name, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetName() string { return v.Name }

// GetCallbackUrl returns CreateRawTransactionWebhookArgs.CallbackUrl, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetCallbackUrl() string { return v.CallbackUrl }

// GetSecurityToken returns CreateRawTransactionWebhookArgs.SecurityToken, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetSecurityToken() string { return v.SecurityToken }

// GetAlertRecurrence returns CreateRawTransactionWebhookArgs.AlertRecurrence, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetAlertRecurrence() AlertRecurrence {
	return v.AlertRecurrence
}

// GetGroupId returns CreateRawTransactionWebhookArgs.GroupId, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetGroupId() string { return v.GroupId }

// GetConditions returns CreateRawTransactionWebhookArgs.Conditions, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetConditions() RawTransactionWebhookConditionInput {
	return v.Conditions
}

// GetRetrySettings returns CreateRawTransactionWebhookArgs.RetrySettings, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetRetrySettings() RetrySettingsInput {
	return v.RetrySettings
}

// GetBucketId returns CreateRawTransactionWebhookArgs.BucketId, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetBucketId() string { return v.BucketId }

// GetBucketSortkey returns CreateRawTransactionWebhookArgs.BucketSortkey, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetBucketSortkey() string { return v.BucketSortkey }

// GetPublishingType returns CreateRawTransactionWebhookArgs.PublishingType, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetPublishingType() PublishingType { return v.PublishingType }

// GetDeduplicate returns CreateRawTransactionWebhookArgs.Deduplicate, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhookArgs) GetDeduplicate() bool { return v.Deduplicate }

// Input for creating Raw Transaction webhooks.
type CreateRawTransactionWebhooksInput struct {
	// A list of Raw Transaction webhooks to create.
	Webhooks []CreateRawTransactionWebhookArgs `json:"webhooks"`
}

// GetWebhooks returns CreateRawTransactionWebhooksInput.Webhooks, and is useful for accessing the field via an interface.
func (v *CreateRawTransactionWebhooksInput) GetWebhooks() []CreateRawTransactionWebhookArgs {
	return v.Webhooks
}

// Input for creating a token pair event webhook.
type CreateTokenPairEventWebhookArgs struct {
	// The name of the webhook (max 128 characters).
	Name string `json:"name"`
	// The url to which the webhook message should be sent.
	CallbackUrl string `json:"callbackUrl"`
	// A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security.
	SecurityToken string `json:"securityToken"`
	// The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`.
	AlertRecurrence AlertRecurrence `json:"alertRecurrence"`
	// A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook.
	GroupId string `json:"groupId"`
	// The conditions which must be met in order for the webhook to send a message.
	Conditions TokenPairEventWebhookConditionInput `json:"conditions"`
	// The settings for retrying failed webhook messages.
	RetrySettings RetrySettingsInput `json:"retrySettings"`
	// An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketId string `json:"bucketId"`
	// An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketSortkey string `json:"bucketSortkey"`
	// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
	PublishingType PublishingType `json:"publishingType"`
	// If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook.
	Deduplicate bool `json:"deduplicate"`
}

// GetName returns CreateTokenPairEventWebhookArgs.Name, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetName() string { return v.Name }

// GetCallbackUrl returns CreateTokenPairEventWebhookArgs.CallbackUrl, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetCallbackUrl() string { return v.CallbackUrl }

// GetSecurityToken returns CreateTokenPairEventWebhookArgs.SecurityToken, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetSecurityToken() string { return v.SecurityToken }

// GetAlertRecurrence returns CreateTokenPairEventWebhookArgs.AlertRecurrence, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetAlertRecurrence() AlertRecurrence {
	return v.AlertRecurrence
}

// GetGroupId returns CreateTokenPairEventWebhookArgs.GroupId, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetGroupId() string { return v.GroupId }

// GetConditions returns CreateTokenPairEventWebhookArgs.Conditions, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetConditions() TokenPairEventWebhookConditionInput {
	return v.Conditions
}

// GetRetrySettings returns CreateTokenPairEventWebhookArgs.RetrySettings, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetRetrySettings() RetrySettingsInput {
	return v.RetrySettings
}

// GetBucketId returns CreateTokenPairEventWebhookArgs.BucketId, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetBucketId() string { return v.BucketId }

// GetBucketSortkey returns CreateTokenPairEventWebhookArgs.BucketSortkey, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetBucketSortkey() string { return v.BucketSortkey }

// GetPublishingType returns CreateTokenPairEventWebhookArgs.PublishingType, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetPublishingType() PublishingType { return v.PublishingType }

// GetDeduplicate returns CreateTokenPairEventWebhookArgs.Deduplicate, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhookArgs) GetDeduplicate() bool { return v.Deduplicate }

// Input for creating token pair event webhooks.
type CreateTokenPairEventWebhooksInput struct {
	// A list of token pair event webhooks to create.
	Webhooks []CreateTokenPairEventWebhookArgs `json:"webhooks"`
}

// GetWebhooks returns CreateTokenPairEventWebhooksInput.Webhooks, and is useful for accessing the field via an interface.
func (v *CreateTokenPairEventWebhooksInput) GetWebhooks() []CreateTokenPairEventWebhookArgs {
	return v.Webhooks
}

// CreateWebhooksCreateWebhooksCreateWebhooksOutput includes the requested fields of the GraphQL type CreateWebhooksOutput.
// The GraphQL type's documentation follows.
//
// Result returned by `createWebhooks`.
type CreateWebhooksCreateWebhooksCreateWebhooksOutput struct {
	// The list of token pair event webhooks that were created.
	TokenPairEventWebhooks []CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook `json:"tokenPairEventWebhooks"`
}

// GetTokenPairEventWebhooks returns CreateWebhooksCreateWebhooksCreateWebhooksOutput.TokenPairEventWebhooks, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutput) GetTokenPairEventWebhooks() []CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook {
	return v.TokenPairEventWebhooks
}

// CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook includes the requested fields of the GraphQL type Webhook.
// The GraphQL type's documentation follows.
//
// Metadata for a webhook.
type CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook struct {
	// The ID of the webhook.
	Id string `json:"id"`
	// The given name of the webhook.
	Name string `json:"name"`
	// The url to which the webhook message should be sent.
	CallbackUrl string `json:"callbackUrl"`
	// The status of the webhook. Can be `ACTIVE` or `INACTIVE`.
	Status string `json:"status"`
	// The webhook group ID used to group webhooks together for ordered message sending.
	GroupId string `json:"groupId"`
	// An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketId string `json:"bucketId"`
	// An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks).
	BucketSortkey string `json:"bucketSortkey"`
	// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
	PublishingType PublishingType `json:"publishingType"`
}

// GetId returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.Id, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetId() string {
	return v.Id
}

// GetName returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.Name, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetName() string {
	return v.Name
}

// GetCallbackUrl returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.CallbackUrl, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetCallbackUrl() string {
	return v.CallbackUrl
}

// GetStatus returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.Status, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetStatus() string {
	return v.Status
}

// GetGroupId returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.GroupId, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetGroupId() string {
	return v.GroupId
}

// GetBucketId returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.BucketId, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetBucketId() string {
	return v.BucketId
}

// GetBucketSortkey returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.BucketSortkey, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetBucketSortkey() string {
	return v.BucketSortkey
}

// GetPublishingType returns CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook.PublishingType, and is useful for accessing the field via an interface.
func (v *CreateWebhooksCreateWebhooksCreateWebhooksOutputTokenPairEventWebhooksWebhook) GetPublishingType() PublishingType {
	return v.PublishingType
}

// Input for creating webhooks.
type CreateWebhooksInput struct {
	// Input for creating price webhooks.
	PriceWebhooksInput CreatePriceWebhooksInput `json:"priceWebhooksInput"`
	// Input for creating token pair event webhooks.
	TokenPairEventWebhooksInput CreateTokenPairEventWebhooksInput `json:"tokenPairEventWebhooksInput"`
	// Input for creating NFT event webhooks.
	NftEventWebhooksInput CreateNftEventWebhooksInput `json:"nftEventWebhooksInput"`
	// Input for creating raw transaction webhooks.
	RawTransactionWebhooksInput CreateRawTransactionWebhooksInput `json:"rawTransactionWebhooksInput"`
	// Input for creating market cap webhooks.
	MarketCapWebhooksInput CreateMarketCapWebhooksInput `json:"marketCapWebhooksInput"`
}

// GetPriceWebhooksInput returns CreateWebhooksInput.PriceWebhooksInput, and is useful for accessing the field via an interface.
func (v *CreateWebhooksInput) GetPriceWebhooksInput() CreatePriceWebhooksInput {
	return v.PriceWebhooksInput
}

// GetTokenPairEventWebhooksInput returns CreateWebhooksInput.TokenPairEventWebhooksInput, and is useful for accessing the field via an interface.
func (v *CreateWebhooksInput) GetTokenPairEventWebhooksInput() CreateTokenPairEventWebhooksInput {
	return v.TokenPairEventWebhooksInput
}

// GetNftEventWebhooksInput returns CreateWebhooksInput.NftEventWebhooksInput, and is useful for accessing the field via an interface.
func (v *CreateWebhooksInput) GetNftEventWebhooksInput() CreateNftEventWebhooksInput {
	return v.NftEventWebhooksInput
}

// GetRawTransactionWebhooksInput returns CreateWebhooksInput.RawTransactionWebhooksInput, and is useful for accessing the field via an interface.
func (v *CreateWebhooksInput) GetRawTransactionWebhooksInput() CreateRawTransactionWebhooksInput {
	return v.RawTransactionWebhooksInput
}

// GetMarketCapWebhooksInput returns CreateWebhooksInput.MarketCapWebhooksInput, and is useful for accessing the field via an interface.
func (v *CreateWebhooksInput) GetMarketCapWebhooksInput() CreateMarketCapWebhooksInput {
	return v.MarketCapWebhooksInput
}

// CreateWebhooksResponse is returned by CreateWebhooks on success.
type CreateWebhooksResponse struct {
	// Create price, raw transaction, token/pair event, and NFT event webhooks.
	CreateWebhooks CreateWebhooksCreateWebhooksCreateWebhooksOutput `json:"createWebhooks"`
}

// GetCreateWebhooks returns CreateWebhooksResponse.CreateWebhooks, and is useful for accessing the field via an interface.
func (v *CreateWebhooksResponse) GetCreateWebhooks() CreateWebhooksCreateWebhooksCreateWebhooksOutput {
	return v.CreateWebhooks
}

// Input for integer equals condition.
type IntEqualsConditionInput struct {
	// The integer to equal.
	Eq int `json:"eq"`
}

// GetEq returns IntEqualsConditionInput.Eq, and is useful for accessing the field via an interface.
func (v *IntEqualsConditionInput) GetEq() int { return v.Eq }

// Input conditions for a market cap event webhook.
type MarketCapEventWebhookConditionInput struct {
	// The contract address of the token to listen for.
	TokenAddress StringEqualsConditionInput `json:"tokenAddress"`
	// The network ID to listen on.
	NetworkId IntEqualsConditionInput `json:"networkId"`
	// The price conditions to listen for.
	FdvMarketCapUsd ComparisonOperatorInput `json:"fdvMarketCapUsd"`
	// The circulating market cap conditions to listen for.
	CirculatingMarketCapUsd ComparisonOperatorInput `json:"circulatingMarketCapUsd"`
	// The contract address of the pair to listen for.
	PairAddress StringEqualsConditionInput `json:"pairAddress"`
}

// GetTokenAddress returns MarketCapEventWebhookConditionInput.TokenAddress, and is useful for accessing the field via an interface.
func (v *MarketCapEventWebhookConditionInput) GetTokenAddress() StringEqualsConditionInput {
	return v.TokenAddress
}

// GetNetworkId returns MarketCapEventWebhookConditionInput.NetworkId, and is useful for accessing the field via an interface.
func (v *MarketCapEventWebhookConditionInput) GetNetworkId() IntEqualsConditionInput {
	return v.NetworkId
}

// GetFdvMarketCapUsd returns MarketCapEventWebhookConditionInput.FdvMarketCapUsd, and is useful for accessing the field via an interface.
func (v *MarketCapEventWebhookConditionInput) GetFdvMarketCapUsd() ComparisonOperatorInput {
	return v.FdvMarketCapUsd
}

// GetCirculatingMarketCapUsd returns MarketCapEventWebhookConditionInput.CirculatingMarketCapUsd, and is useful for accessing the field via an interface.
func (v *MarketCapEventWebhookConditionInput) GetCirculatingMarketCapUsd() ComparisonOperatorInput {
	return v.CirculatingMarketCapUsd
}

// GetPairAddress returns MarketCapEventWebhookConditionInput.PairAddress, and is useful for accessing the field via an interface.
func (v *MarketCapEventWebhookConditionInput) GetPairAddress() StringEqualsConditionInput {
	return v.PairAddress
}

// Input for NFT event fill source condition.
type NftEventFillSourceConditionInput struct {
	// The list of NFT marketplace to equal.
	OneOf []WebhookNftEventFillSource `json:"oneOf"`
}

// GetOneOf returns NftEventFillSourceConditionInput.OneOf, and is useful for accessing the field via an interface.
func (v *NftEventFillSourceConditionInput) GetOneOf() []WebhookNftEventFillSource { return v.OneOf }

// Input for NFT event type.
type NftEventTypeConditionInput struct {
	// The NFT event type to equal.
	Eq WebhookNftEventType `json:"eq"`
}

// GetEq returns NftEventTypeConditionInput.Eq, and is useful for accessing the field via an interface.
func (v *NftEventTypeConditionInput) GetEq() WebhookNftEventType { return v.Eq }

// Input conditions for an NFT event webhook.
type NftEventWebhookConditionInput struct {
	// A list of network IDs to listen on.
	NetworkId OneOfNumberConditionInput `json:"networkId"`
	// The maker wallet address to listen for.
	Maker StringEqualsConditionInput `json:"maker"`
	// The NFT collection contract address to listen for.
	ContractAddress StringEqualsConditionInput `json:"contractAddress"`
	// The exchange contract address to listen for.
	ExchangeAddress StringEqualsConditionInput `json:"exchangeAddress"`
	// The token ID to listen for.
	TokenId StringEqualsConditionInput `json:"tokenId"`
	// The NFT event type to listen for.
	EventType NftEventTypeConditionInput `json:"eventType"`
	// The NFT marketplaces to listen for.
	FillSource NftEventFillSourceConditionInput `json:"fillSource"`
	// Option to ignore all nft transfer events
	IgnoreTransfers bool `json:"ignoreTransfers"`
}

// GetNetworkId returns NftEventWebhookConditionInput.NetworkId, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetNetworkId() OneOfNumberConditionInput { return v.NetworkId }

// GetMaker returns NftEventWebhookConditionInput.Maker, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetMaker() StringEqualsConditionInput { return v.Maker }

// GetContractAddress returns NftEventWebhookConditionInput.ContractAddress, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetContractAddress() StringEqualsConditionInput {
	return v.ContractAddress
}

// GetExchangeAddress returns NftEventWebhookConditionInput.ExchangeAddress, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetExchangeAddress() StringEqualsConditionInput {
	return v.ExchangeAddress
}

// GetTokenId returns NftEventWebhookConditionInput.TokenId, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetTokenId() StringEqualsConditionInput { return v.TokenId }

// GetEventType returns NftEventWebhookConditionInput.EventType, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetEventType() NftEventTypeConditionInput { return v.EventType }

// GetFillSource returns NftEventWebhookConditionInput.FillSource, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetFillSource() NftEventFillSourceConditionInput {
	return v.FillSource
}

// GetIgnoreTransfers returns NftEventWebhookConditionInput.IgnoreTransfers, and is useful for accessing the field via an interface.
func (v *NftEventWebhookConditionInput) GetIgnoreTransfers() bool { return v.IgnoreTransfers }

// Input for integer list condition.
type OneOfNumberConditionInput struct {
	// The list of integers.
	OneOf []int `json:"oneOf"`
}

// GetOneOf returns OneOfNumberConditionInput.OneOf, and is useful for accessing the field via an interface.
func (v *OneOfNumberConditionInput) GetOneOf() []int { return v.OneOf }

// Input conditions for a price event webhook.
type PriceEventWebhookConditionInput struct {
	// The contract address of the token to listen for.
	TokenAddress StringEqualsConditionInput `json:"tokenAddress"`
	// The network ID to listen on.
	NetworkId IntEqualsConditionInput `json:"networkId"`
	// The price conditions to listen for.
	PriceUsd ComparisonOperatorInput `json:"priceUsd"`
	// The contract address of the pair to listen for.
	PairAddress StringEqualsConditionInput `json:"pairAddress"`
}

// GetTokenAddress returns PriceEventWebhookConditionInput.TokenAddress, and is useful for accessing the field via an interface.
func (v *PriceEventWebhookConditionInput) GetTokenAddress() StringEqualsConditionInput {
	return v.TokenAddress
}

// GetNetworkId returns PriceEventWebhookConditionInput.NetworkId, and is useful for accessing the field via an interface.
func (v *PriceEventWebhookConditionInput) GetNetworkId() IntEqualsConditionInput { return v.NetworkId }

// GetPriceUsd returns PriceEventWebhookConditionInput.PriceUsd, and is useful for accessing the field via an interface.
func (v *PriceEventWebhookConditionInput) GetPriceUsd() ComparisonOperatorInput { return v.PriceUsd }

// GetPairAddress returns PriceEventWebhookConditionInput.PairAddress, and is useful for accessing the field via an interface.
func (v *PriceEventWebhookConditionInput) GetPairAddress() StringEqualsConditionInput {
	return v.PairAddress
}

// The type of publishing for the webhook. If not set, it defaults to `SINGLE`.
type PublishingType string

const (
	PublishingTypeBatch  PublishingType = "BATCH"
	PublishingTypeSingle PublishingType = "SINGLE"
)

var AllPublishingType = []PublishingType{
	PublishingTypeBatch,
	PublishingTypeSingle,
}

// Input conditions for a Raw Transaction webhook.
type RawTransactionWebhookConditionInput struct {
	// A list of network IDs to listen on.
	NetworkId OneOfNumberConditionInput `json:"networkId"`
	// The to address to listen for.
	To StringEqualsConditionInput `json:"to"`
	// The from address to listen for.
	From StringEqualsConditionInput `json:"from"`
	// Trigger the webhook if either the to or the from address matches.
	ToOrFrom StringEqualsConditionInput `json:"toOrFrom"`
	// Trigger the webhook if the input contains or doesn't contain the specified string.
	Input StringContainsConditionInput `json:"input"`
	// Do not trigger the webhook if the raw transaction is handled by the TokenPairEvent webhook.
	IgnoreTokenPairEvents bool `json:"ignoreTokenPairEvents"`
	// Do not trigger the webhook if the raw transaction is handled by the NftEvent webhook.
	IgnoreNftEvents bool `json:"ignoreNftEvents"`
}

// GetNetworkId returns RawTransactionWebhookConditionInput.NetworkId, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetNetworkId() OneOfNumberConditionInput {
	return v.NetworkId
}

// GetTo returns RawTransactionWebhookConditionInput.To, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetTo() StringEqualsConditionInput { return v.To }

// GetFrom returns RawTransactionWebhookConditionInput.From, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetFrom() StringEqualsConditionInput { return v.From }

// GetToOrFrom returns RawTransactionWebhookConditionInput.ToOrFrom, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetToOrFrom() StringEqualsConditionInput {
	return v.ToOrFrom
}

// GetInput returns RawTransactionWebhookConditionInput.Input, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetInput() StringContainsConditionInput { return v.Input }

// GetIgnoreTokenPairEvents returns RawTransactionWebhookConditionInput.IgnoreTokenPairEvents, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetIgnoreTokenPairEvents() bool {
	return v.IgnoreTokenPairEvents
}

// GetIgnoreNftEvents returns RawTransactionWebhookConditionInput.IgnoreNftEvents, and is useful for accessing the field via an interface.
func (v *RawTransactionWebhookConditionInput) GetIgnoreNftEvents() bool { return v.IgnoreNftEvents }

// Config input for retrying failed webhook messages.
type RetrySettingsInput struct {
	// The maximum time in seconds that the webhook will retry sending a message
	MaxTimeElapsed int `json:"maxTimeElapsed"`
	// The minimum time in seconds that the webhook will wait before retrying a failed message
	MinRetryDelay int `json:"minRetryDelay"`
	// The maximum time in seconds that the webhook will wait before retrying a failed message
	MaxRetryDelay int `json:"maxRetryDelay"`
	// The maximum number of times the webhook will retry sending a message
	MaxRetries int `json:"maxRetries"`
}

// GetMaxTimeElapsed returns RetrySettingsInput.MaxTimeElapsed, and is useful for accessing the field via an interface.
func (v *RetrySettingsInput) GetMaxTimeElapsed() int { return v.MaxTimeElapsed }

// GetMinRetryDelay returns RetrySettingsInput.MinRetryDelay, and is useful for accessing the field via an interface.
func (v *RetrySettingsInput) GetMinRetryDelay() int { return v.MinRetryDelay }

// GetMaxRetryDelay returns RetrySettingsInput.MaxRetryDelay, and is useful for accessing the field via an interface.
func (v *RetrySettingsInput) GetMaxRetryDelay() int { return v.MaxRetryDelay }

// GetMaxRetries returns RetrySettingsInput.MaxRetries, and is useful for accessing the field via an interface.
func (v *RetrySettingsInput) GetMaxRetries() int { return v.MaxRetries }

// Input for string contains condition.
type StringContainsConditionInput struct {
	// A list of substrings to be included within the string.
	Contains []string `json:"contains"`
	// A list of substrings not to be included within the string.
	NotContains []string `json:"notContains"`
}

// GetContains returns StringContainsConditionInput.Contains, and is useful for accessing the field via an interface.
func (v *StringContainsConditionInput) GetContains() []string { return v.Contains }

// GetNotContains returns StringContainsConditionInput.NotContains, and is useful for accessing the field via an interface.
func (v *StringContainsConditionInput) GetNotContains() []string { return v.NotContains }

// Input for string equals condition.
type StringEqualsConditionInput struct {
	// The string to equal.
	Eq string `json:"eq"`
}

// GetEq returns StringEqualsConditionInput.Eq, and is useful for accessing the field via an interface.
func (v *StringEqualsConditionInput) GetEq() string { return v.Eq }

// Token pair event types.
type TokenPairEventType string

const (
	TokenPairEventTypeSwap            TokenPairEventType = "SWAP"
	TokenPairEventTypeMint            TokenPairEventType = "MINT"
	TokenPairEventTypeBurn            TokenPairEventType = "BURN"
	TokenPairEventTypeSync            TokenPairEventType = "SYNC"
	TokenPairEventTypeBuy             TokenPairEventType = "BUY"
	TokenPairEventTypeSell            TokenPairEventType = "SELL"
	TokenPairEventTypeCollect         TokenPairEventType = "COLLECT"
	TokenPairEventTypeCollectProtocol TokenPairEventType = "COLLECT_PROTOCOL"
)

var AllTokenPairEventType = []TokenPairEventType{
	TokenPairEventTypeSwap,
	TokenPairEventTypeMint,
	TokenPairEventTypeBurn,
	TokenPairEventTypeSync,
	TokenPairEventTypeBuy,
	TokenPairEventTypeSell,
	TokenPairEventTypeCollect,
	TokenPairEventTypeCollectProtocol,
}

// Input for token pair event type condition.
type TokenPairEventTypeConditionInput struct {
	// The list of token event types to equal.
	OneOf []TokenPairEventType `json:"oneOf"`
}

// GetOneOf returns TokenPairEventTypeConditionInput.OneOf, and is useful for accessing the field via an interface.
func (v *TokenPairEventTypeConditionInput) GetOneOf() []TokenPairEventType { return v.OneOf }

// Input conditions for a token pair event webhook.
type TokenPairEventWebhookConditionInput struct {
	// A list of network IDs to listen on.
	NetworkId OneOfNumberConditionInput `json:"networkId"`
	// The maker wallet address to listen for.
	Maker StringEqualsConditionInput `json:"maker"`
	// The pair contract address to listen for.
	PairAddress StringEqualsConditionInput `json:"pairAddress"`
	// The exchange contract address to listen for.
	ExchangeAddress StringEqualsConditionInput `json:"exchangeAddress"`
	// The token contract address to listen for.
	TokenAddress StringEqualsConditionInput `json:"tokenAddress"`
	// The swap values to listen for.
	SwapValue ComparisonOperatorInput `json:"swapValue"`
	// The token event type to listen for.
	EventType TokenPairEventTypeConditionInput `json:"eventType"`
}

// GetNetworkId returns TokenPairEventWebhookConditionInput.NetworkId, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetNetworkId() OneOfNumberConditionInput {
	return v.NetworkId
}

// GetMaker returns TokenPairEventWebhookConditionInput.Maker, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetMaker() StringEqualsConditionInput { return v.Maker }

// GetPairAddress returns TokenPairEventWebhookConditionInput.PairAddress, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetPairAddress() StringEqualsConditionInput {
	return v.PairAddress
}

// GetExchangeAddress returns TokenPairEventWebhookConditionInput.ExchangeAddress, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetExchangeAddress() StringEqualsConditionInput {
	return v.ExchangeAddress
}

// GetTokenAddress returns TokenPairEventWebhookConditionInput.TokenAddress, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetTokenAddress() StringEqualsConditionInput {
	return v.TokenAddress
}

// GetSwapValue returns TokenPairEventWebhookConditionInput.SwapValue, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetSwapValue() ComparisonOperatorInput {
	return v.SwapValue
}

// GetEventType returns TokenPairEventWebhookConditionInput.EventType, and is useful for accessing the field via an interface.
func (v *TokenPairEventWebhookConditionInput) GetEventType() TokenPairEventTypeConditionInput {
	return v.EventType
}

// NFT marketplace names.
type WebhookNftEventFillSource string

const (
	WebhookNftEventFillSourceGem            WebhookNftEventFillSource = "GEM"
	WebhookNftEventFillSourceEnsvision      WebhookNftEventFillSource = "ENSVISION"
	WebhookNftEventFillSourceBlur           WebhookNftEventFillSource = "BLUR"
	WebhookNftEventFillSourceNftnerds       WebhookNftEventFillSource = "NFTNERDS"
	WebhookNftEventFillSourceOpensea        WebhookNftEventFillSource = "OPENSEA"
	WebhookNftEventFillSourceRarible        WebhookNftEventFillSource = "RARIBLE"
	WebhookNftEventFillSourceFlipxyz        WebhookNftEventFillSource = "FLIPXYZ"
	WebhookNftEventFillSourceEchelon        WebhookNftEventFillSource = "ECHELON"
	WebhookNftEventFillSourceSoundxyz       WebhookNftEventFillSource = "SOUNDXYZ"
	WebhookNftEventFillSourceCoinbase       WebhookNftEventFillSource = "COINBASE"
	WebhookNftEventFillSourceMagiceden      WebhookNftEventFillSource = "MAGICEDEN"
	WebhookNftEventFillSourceElement        WebhookNftEventFillSource = "ELEMENT"
	WebhookNftEventFillSourceKodex          WebhookNftEventFillSource = "KODEX"
	WebhookNftEventFillSourceReservoirtools WebhookNftEventFillSource = "RESERVOIRTOOLS"
	WebhookNftEventFillSourceGenie          WebhookNftEventFillSource = "GENIE"
)

var AllWebhookNftEventFillSource = []WebhookNftEventFillSource{
	WebhookNftEventFillSourceGem,
	WebhookNftEventFillSourceEnsvision,
	WebhookNftEventFillSourceBlur,
	WebhookNftEventFillSourceNftnerds,
	WebhookNftEventFillSourceOpensea,
	WebhookNftEventFillSourceRarible,
	WebhookNftEventFillSourceFlipxyz,
	WebhookNftEventFillSourceEchelon,
	WebhookNftEventFillSourceSoundxyz,
	WebhookNftEventFillSourceCoinbase,
	WebhookNftEventFillSourceMagiceden,
	WebhookNftEventFillSourceElement,
	WebhookNftEventFillSourceKodex,
	WebhookNftEventFillSourceReservoirtools,
	WebhookNftEventFillSourceGenie,
}

// NFT event types.
type WebhookNftEventType string

const (
	WebhookNftEventTypeMint     WebhookNftEventType = "MINT"
	WebhookNftEventTypeSale     WebhookNftEventType = "SALE"
	WebhookNftEventTypeTransfer WebhookNftEventType = "TRANSFER"
)

var AllWebhookNftEventType = []WebhookNftEventType{
	WebhookNftEventTypeMint,
	WebhookNftEventTypeSale,
	WebhookNftEventTypeTransfer,
}

// __CreateWebhooksInput is used internally by genqlient
type __CreateWebhooksInput struct {
	Input CreateWebhooksInput `json:"input"`
}

// GetInput returns __CreateWebhooksInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateWebhooksInput) GetInput() CreateWebhooksInput { return v.Input }

// The mutation executed by CreateWebhooks.
const CreateWebhooks_Operation = `
mutation CreateWebhooks ($input: CreateWebhooksInput!) {
	createWebhooks(input: $input) {
		tokenPairEventWebhooks {
			id
			name
			callbackUrl
			status
			groupId
			bucketId
			bucketSortkey
			publishingType
		}
	}
}
`

func CreateWebhooks(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateWebhooksInput,
) (data_ *CreateWebhooksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateWebhooks",
		Query:  CreateWebhooks_Operation,
		Variables: &__CreateWebhooksInput{
			Input: input,
		},
	}

	data_ = &CreateWebhooksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
